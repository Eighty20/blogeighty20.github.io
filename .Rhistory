p1 <- ggplot(data=mean.time, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point()
p2 <- ggplot(data=median.time, aes(x=numSheet, y=medianTime, group=package, colour=package)) + geom_line() + geom_point()
p3 <- ggplot(data=min.time, aes(x=numSheet, y=minTime, group=package, colour=package)) + geom_line() + geom_point()
p4 <- ggplot(data=max.time, aes(x=numSheet, y=maxTime, group=package, colour=package)) + geom_line() + geom_point()
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
layout.pos.col = matchidx$col))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
}
}
}
multiplot(p1, p2, p3, p4, cols=2)
p1 <- ggplot(data=mean.time, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time")
p2 <- ggplot(data=median.time, aes(x=numSheet, y=medianTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Median Time")
p3 <- ggplot(data=min.time, aes(x=numSheet, y=minTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Min Time")
p4 <- ggplot(data=max.time, aes(x=numSheet, y=maxTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Max Time")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, p4, cols=2)
p1 <- ggplot(data=mean.time, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time") +
theme(text = element_text(size=20))
p2 <- ggplot(data=median.time, aes(x=numSheet, y=medianTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Median Time") +
theme(text = element_text(size=20))
p3 <- ggplot(data=min.time, aes(x=numSheet, y=minTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Min Time") +
theme(text = element_text(size=20))
p4 <- ggplot(data=max.time, aes(x=numSheet, y=maxTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Max Time") +
theme(text = element_text(size=20))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(p1, p2, p3, p4, cols=2)
p1 <- ggplot(data=mean.time, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time") +
theme(text = element_text(size=5))
p2 <- ggplot(data=median.time, aes(x=numSheet, y=medianTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Median Time") +
theme(text = element_text(size=5))
p3 <- ggplot(data=min.time, aes(x=numSheet, y=minTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Min Time") +
theme(text = element_text(size=5))
p4 <- ggplot(data=max.time, aes(x=numSheet, y=maxTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Max Time") +
theme(text = element_text(size=5))
multiplot(p1, p2, p3, p4, cols=2)
p1 <- ggplot(data=mean.time, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time") +
theme(text = element_text(size=7))
p2 <- ggplot(data=median.time, aes(x=numSheet, y=medianTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Median Time") +
theme(text = element_text(size=7))
p3 <- ggplot(data=min.time, aes(x=numSheet, y=minTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Min Time") +
theme(text = element_text(size=7))
p4 <- ggplot(data=max.time, aes(x=numSheet, y=maxTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Max Time") +
theme(text = element_text(size=7))
multiplot(p1, p2, p3, p4, cols=2)
library(ggplot2)
data <- read.table(header = TRUE, text =
'package numSheet       Time measure
xlsx        1       7.71    mean
xlsx        3      23.14    mean
xlsx        5      39.48    mean
xlsx       10      75.75    mean
openxlsx        1       6.62    mean
openxlsx        3      20.96    mean
openxlsx        5      36.82    mean
openxlsx       10      74.73    mean
xlsx        1       6.93  median
xlsx        3      23.41  median
xlsx        5      38.55  median
xlsx       10      75.26  median
openxlsx        1       6.61  median
openxlsx        3      20.39  median
openxlsx        5      36.77  median
openxlsx       10      74.14  median
xlsx        1       6.77     min
xlsx        3      19.36     min
xlsx        5      33.85     min
xlsx       10      65.61     min
openxlsx        1       6.32     min
openxlsx        3      18.56     min
openxlsx        5      34.57     min
openxlsx       10      71.27     min
xlsx        1      10.18     max
xlsx        3      34.61     max
xlsx        5      48.55     max
xlsx       10      87.86     max
openxlsx        1       7.14     max
openxlsx        3      23.39     max
openxlsx        5      38.59     max
openxlsx       10      80.94     max'
)
p1 <- ggplot(data=data, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time") +
theme(text = element_text(size=7)) + facet_wrap( ~ measure, col = 2)
p1 <- ggplot(data=data, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time") +
theme(text = element_text(size=7)) + facet_wrap( ~ measure, ncol = 2)
ggplot(data=data, aes(x=numSheet, y=meanTime, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time") +
theme(text = element_text(size=7)) + facet_wrap( ~ measure, ncol = 2)
ggplot(data=data, aes(x=numSheet, y=Time, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Mean Time") +
theme(text = element_text(size=7)) + facet_wrap( ~ measure, ncol = 2)
ggplot(data=data, aes(x=numSheet, y=Time, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Measures of Time") +
theme(text = element_text(size=7)) + facet_wrap( ~ measure, ncol = 2)
data <- read.table(header = TRUE, text =
'package numSheet       Time measure
xlsx        1      10.18     max
xlsx        3      34.61     max
xlsx        5      48.55     max
xlsx       10      87.86     max
openxlsx        1       7.14     max
openxlsx        3      23.39     max
openxlsx        5      38.59     max
openxlsx       10      80.94     max
xlsx        1       7.71    mean
xlsx        3      23.14    mean
xlsx        5      39.48    mean
xlsx       10      75.75    mean
openxlsx        1       6.62    mean
openxlsx        3      20.96    mean
openxlsx        5      36.82    mean
openxlsx       10      74.73    mean
xlsx        1       6.93  median
xlsx        3      23.41  median
xlsx        5      38.55  median
xlsx       10      75.26  median
openxlsx        1       6.61  median
openxlsx        3      20.39  median
openxlsx        5      36.77  median
openxlsx       10      74.14  median
xlsx        1       6.77     min
xlsx        3      19.36     min
xlsx        5      33.85     min
xlsx       10      65.61     min
openxlsx        1       6.32     min
openxlsx        3      18.56     min
openxlsx        5      34.57     min
openxlsx       10      71.27     min
'
)
ggplot(data=data, aes(x=numSheet, y=Time, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Measures of Time") +
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
data <- as.data.frame(read.table(header = TRUE, text =
'package numSheet       Time measure
xlsx        1      10.18     max
xlsx        3      34.61     max
xlsx        5      48.55     max
xlsx       10      87.86     max
openxlsx        1       7.14     max
openxlsx        3      23.39     max
openxlsx        5      38.59     max
openxlsx       10      80.94     max
xlsx        1       7.71    mean
xlsx        3      23.14    mean
xlsx        5      39.48    mean
xlsx       10      75.75    mean
openxlsx        1       6.62    mean
openxlsx        3      20.96    mean
openxlsx        5      36.82    mean
xlsx        1       6.93  median
openxlsx       10      74.73    mean
xlsx        3      23.41  median
xlsx        5      38.55  median
xlsx       10      75.26  median
openxlsx        1       6.61  median
openxlsx        3      20.39  median
openxlsx        5      36.77  median
openxlsx       10      74.14  median
xlsx        1       6.77     min
xlsx        3      19.36     min
xlsx        5      33.85     min
xlsx       10      65.61     min
openxlsx        1       6.32     min
openxlsx        3      18.56     min
openxlsx        5      34.57     min
openxlsx       10      71.27     min
'
))
ggplot(data=data, aes(x=numSheet, y=Time, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Measures of Time") +
theme(text = element_text(size=7)) + facet_wrap( ~ measure, ncol = 2)
str(data$measure)
data <- factor(data$measure, levels = c("mean", "median", "min", "max"))
str(data$measure)
data <- factor(data$measure, levels = c("mean", "median", "min", "max"))
str(data$measure)
ggplot(data=data, aes(x=numSheet, y=Time, group=package, colour=package)) + geom_line() + geom_point() + ggtitle("Measures of Time") +
theme(text = element_text(size=7)) + facet_wrap( ~ measure, ncol = 2)
data <- relevel(data$measure, levels = c("mean", "median", "min", "max"))
library(dplyr)
install.package("dplyr")
install.packages("dplyr")
library(EightyR)
Post_Blog("Mirror_Mirror.Rmd", subtitle = "Who's the fastest of them all", category = c("Package Exploration"), tags =c("R"))
Post_Blog("wine_review.Rmd", subtitle = "Exploring rvest", category = c("Package Exploration"), tags =c("R", "Scraping", "rvest"))
library(EightyR)
Post_Blog("wine_review.Rmd", subtitle = "Exploring rvest", category = c("Package Exploration"), tags =c("R", "Scraping", "rvest"))
Post_Blog("wine_review.Rmd", subtitle = "Exploring rvest", category = c("Package Exploration"), tags =c("R", "Scraping", "rvest"))
library(EightyR)
library(EightyR)
load_pkg(c("readr", "dplyr", "rvest"))
Wine_all <- bind_rows(read_rds("/_blogData/Wine_collection.RDS"))
getwd()
library(EightyR)
load_pkg(c("readr", "dplyr", "rvest"))
Wine_all <- bind_rows(read_rds("_blogData/Wine_collection.RDS"))
Farm_locations <- read_rds("_blogData/Place_locations.RDS")
Wine_all <- bind_rows(read_rds("_blogData/Wine_collection.RDS"))
Farm_locations <- read_rds("_blogData/Place_locations.rds")
Wine_all <- bind_rows(read_rds("_blogData/Wine_collection.RDS"))
library(EightyR)
load_pkg(c("readr", "dplyr", "rvest"))
Wine_all <- bind_rows(read_rds("_blogData/Wine_collection.rds"))
Farm_locations <- read_rds("_blogData/Place_locations.rds")
names(Wine_all)
library(RJSONIO)
geoPlace <- function(placeName, verbose=FALSE) {
if(verbose) cat(placeName, "\n")
doc <- URLencode(paste0("https://maps.googleapis.com/maps/api/place/textsearch/json?query=",placeName,"&key=YOURKEYHERE"))
x <- fromJSON(doc, simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
formatted_address <- x$results[[1]]$formatted_address
return(data.frame(placeName, lat, lng, formatted_address, stringsAsFactors = F))
} else {
return(c(NA,NA,NA, NA))
}
}
Wine_filtered <-
filter(Wine_all, as.Date(review_date, "%m/%d/%Y") >= as.Date("2013-01-01"))
Farms <-
Wine_filtered %>%
distinct(wine_farms) %>%
unlist
head(Farm_locations)
Wine_filtered <- left_join(Wine_all, Farm_locations, by = c("wine_farms" = "placeName"))
markers <-
Wine_filtered %>% group_by(wine_farms) %>%
summarise(avg_points = mean(as.numeric(points))) %>%
left_join(., Wine_filtered %>% select(wine_farms, lng,lat), by = c("wine_farms")) %>%
distinct() %>% filter(complete.cases(.) == T) %>%
data.frame
setwd(getwd())
library(EightyR)
load_pkg(c("readr", "dplyr", "rvest"))
Wine_all <- bind_rows(read_rds("_blogData/Wine_collection.rds"))
Farm_locations <- read_rds("_blogData/Place_locations.rds")
getwd()
installed.packages("ggthemes")
install.packages("ggthemes")
Post_Blog("Google_api.Rmd", subtitle = "Feature creation", category = c("Package Exploration"), tags =c("R", "Scraping", "ggmaps"))
?Post_Blog
library(EightyR)
load_pkg(c("readr", "dplyr", "rvest"))
90*100
125*100
Lets now see how the function outputs with a simple example using the ?datasets
?datasets
library(help = "datasets").
library(help = "datasets")
InsectSprays
?InsectSprays
LifeCycleSavings
Orange
install.packages("datasets")
?orange
?Orange
Orange
dist_intervals(Orange)
dist_intervals <- function(dframe, colname, groupcolname=NULL) {
mapping = list(col=colname)
if(!is.null(groupcolname)) {
dframe %>% group_by_(groupcolname) -> dframe
}
let(alias=mapping,
expr={
dframe %>% summarize(sdlower = mean(col)-sd(col),
mean = mean(col),
sdupper = mean(col) + sd(col),
iqrlower = median(col)-0.5*IQR(col),
median = median(col),
iqrupper = median(col)+0.5*IQR(col))
})
}
Oranges %>% dist_intervals(Age)
Orange %>% dist_intervals(Age)
Orange %>% dist_intervals(age)
Orange
Orange %>% dist_intervals("age")
library(replyr)
devtools::install_github('WinVector/replyr')
library(replyr)
Orange %>% dist_intervals("age")
Orange %>% dist_intervals("age", "tree")
Orange %>% dist_intervals("age", "Tree")
Puromycin
ToothGrowth
Titanic
Titanic
USAccDeaths
Growth of Loblolly pine trees
Loblolly
WorldPhones
ability.cov
airmiles
airquality
attitude
cars
cars
chickwts
crimtab
Yearly Numbers of Important Discoveries
discoveries
islands
lynx
occupationalStatus
rock
trees
warpbreaks
women
mtcars
LifeCycleSavings
AirPassengers
BJsales
BOD
read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/MASS/snails.csv")
read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/MASS/snails.csv") %>%
glimpse
?snails
?Snails
?Snail
?snail
library(MASS)
?snails
Snails <-  read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/MASS/snails.csv")
Snails %>% glimpse
Snails <-  read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/MASS/snails.csv", row.names = NULL)
Snails %>% glimpse
Snails <-  read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/MASS/snails.csv")
Snails %>% dist_intervals("age")
Snails %>% dist_intervals("Rel.Hum")
Snails %>% dist_intervals("Rel.Hum")
Snails %>% dist_intervals("Rel.Hum", "Species")
Snails %>% dist_intervals("Deaths")
Snails %>% dist_intervals("Deaths", "Species")
Snails
Snails %>% dist_intervals("Deaths")
Snails %>% dist_intervals("Deaths", "Species")
dist_intervals_dplyr <- function(dframe, col, group) {
if(missing(group))
{
df <- dframe  %>%
group_by_(group) %>%
select(., one_of(c(group, col)))
} else {
df <- dframe  %>%
select(., one_of(col))
}
df %>%
summarise_each(funs(sdlower = mean(.) - sd(.),
mean = mean(.),
sdupper = mean(.) + sd(.),
iqrlower = median(.)-0.5*IQR(.),
median = median(.),
iqrupper = median(.)+0.5*IQR(.)))
}
Snails %>% dist_intervals_dplyr("Deaths")
dist_intervals_dplyr <- function(dframe, col, group) {
if(missing(group))
{
df <- dframe  %>%
group_by_(group) %>%
select(., one_of(col))
} else {
df <- dframe  %>%
select(., one_of(c(group, col)))
}
df %>%
summarise_each(funs(sdlower = mean(.) - sd(.),
mean = mean(.),
sdupper = mean(.) + sd(.),
iqrlower = median(.)-0.5*IQR(.),
median = median(.),
iqrupper = median(.)+0.5*IQR(.)))
}
Snails %>% dist_intervals_dplyr("Deaths")
dist_intervals_dplyr <- function(dframe, col, group) {
if(missing(group))
{
df <- dframe  %>%
select(., one_of(col))
} else {
df <- dframe  %>%
group_by_(group) %>%
select(., one_of(c(group, col)))
}
df %>%
summarise_each(funs(sdlower = mean(.) - sd(.),
mean = mean(.),
sdupper = mean(.) + sd(.),
iqrlower = median(.)-0.5*IQR(.),
median = median(.),
iqrupper = median(.)+0.5*IQR(.)))
}
Snails %>% dist_intervals_dplyr("Deaths")
Snails %>% dist_intervals_dplyr(col = "Deaths")
dframe  <- snails
dframe %>%
select(., one_of(col))
col  <- "Deaths"
dframe %>%
select(., one_of(col))
Snails
Snails %>% dist_intervals(col = "Deaths")
dframe %>%
select(., one_of(col)
)
Snails %>% dist_intervals(col = "Deaths")
Snails %>% dist_intervals_dplyr(col = "Deaths")
Snails %>% dist_intervals("Deaths", "Species")
Snails %>% dist_intervals_dplyr("Deaths", "Species")
Snails %>% dist_intervals_dplyr("Deaths", group = "Species")
testFunction <- function(dframe, col, group) {
dframe  %>% group_by_(group) %>%
select(., one_of(c(group, col))) %>%
summarise_each(funs(sdlower = mean(.) - sd(.),
mean = mean(.),
sdupper = mean(.) + sd(.),
iqrlower = median(.)-0.5*IQR(.),
median = median(.),
iqrupper = median(.)+0.5*IQR(.))) %>%
ungroup
}
Snails %>% testFunction("Deaths", group = "Species")
detach("package:MASS", unload=TRUE)
Snails %>% dist_intervals_dplyr(col = "Deaths")
Snails %>% dist_intervals_dplyr(col = "Deaths")
Snails %>% dist_intervals(col = "Deaths")
Snails %>% dist_intervals_dplyr("Deaths", group = "Species")
Snails %>% testFunction("Deaths", group = "Species")
Snails %>% dist_intervals_dplyr(c("Deaths", "Exposure"), group = "Species")
Snails %>% dist_intervals_dplyr(c("Deaths", "Exposure"), group = "Species") %>%
gather(key = Deaths, Metric, -Species) %>%
arrange(Species, Deaths)
library(tidyr)
Snails %>% dist_intervals_dplyr(c("Deaths", "Exposure"), group = "Species") %>%
gather(key = Deaths, Metric, -Species) %>%
arrange(Species, Deaths)
